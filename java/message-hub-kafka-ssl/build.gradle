/**
 * Copyright 2015 IBM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
*/
//
// Licensed Materials - Property of IBM
// Â© Copyright IBM Corp. 2015
//
apply plugin: 'java'

sourceCompatibility = 1.7
targetCompatibility = 1.7
version = '1.0'

repositories {
    mavenCentral()

    // Read from lib/ directory
    flatDir {
        dirs 'lib'
    }
}

// Compile tools.jar and all jars in lib folder as dependencies
dependencies {
    compile 'org.apache.kafka:kafka-clients:0.9.0.0'
    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-log4j12:1.7.6'
    compile 'com.fasterxml.jackson.core:jackson-core:2.5.4'
    compile fileTree(dir: 'lib-message-hub', include: ['*.jar'])
}

copy {
    from configurations.runtime
    into 'lib'
}

copy {
  from 'lib-message-hub'
  into 'lib'
}

// Compile source code
compileJava {
    source = 'src'
    options.encoding = 'ISO-8859-1'
}

copy {
    configurations.runtime.files.collect {
        if(it.name != 'lz4-1.2.0.jar' &&
            it.name != 'snappy-java-1.1.1.7.jar') {

            from zipTree('lib/' + it.name)
            into 'build/extracted'
        }
    }
}

copy {
    from 'resources'
    into 'build/libs/resources'
}

// Create the output JAR file.
jar {
    // Provide Main-Class so the JAR executes properly, along with the required classpath data.
    manifest {
        attributes('Main-Class': 'com.example.KafkaNativeSample',
        'Class-Path': '. ./ ' + configurations.runtime.files.collect { it.name }.join(' '))
    }

    // Copy extracted JARs from earlier into this JAR.
    from 'build/extracted'
}

// Save JAR in build directory.
uploadArchives {
    repositories {
        flatDir {
            dirs 'build'
        }
    }
}
